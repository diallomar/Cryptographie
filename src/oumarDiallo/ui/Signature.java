/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oumarDiallo.ui;


import java.awt.Frame;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import oumarDiallo.crypto.sign.SignatureInput;

/**
 *
 * @author diallomar
 */
public class Signature extends javax.swing.JFrame {

    /**
     * Creates new form Signature
     */
    private static File fileToSign;
    private static File signature;
    private static File cle;
    private static String avertissementCle;
    public Signature() {
        initComponents();
        user.setText(Login.us);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        user = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        selectedAlgo = new javax.swing.JComboBox<>();
        signOrVerif = new javax.swing.JComboBox<>();
        key = new javax.swing.JButton();
        file = new javax.swing.JButton();
        keyName = new javax.swing.JLabel();
        fileName = new javax.swing.JLabel();
        headerTitle = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        sign = new javax.swing.JButton();
        pathStoreSign = new javax.swing.JLabel();
        headerIndicator = new javax.swing.JLabel();
        sgnedFile = new javax.swing.JButton();
        signedFileName = new javax.swing.JLabel();
        verif = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(25, 118, 211));

        jLabel2.setFont(new java.awt.Font("Liberation Mono", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("X");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 3, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Bienvenue dans votre application de Cryptographique pour la sécurité de vos données");

        user.setFont(new java.awt.Font("Liberation Sans", 3, 18)); // NOI18N
        user.setForeground(new java.awt.Color(255, 255, 255));
        user.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(51, 51, 51)
                .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 18, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(237, 234, 234));

        jButton1.setBackground(new java.awt.Color(153, 153, 153));
        jButton1.setFont(new java.awt.Font("Liberation Sans", 3, 18)); // NOI18N
        jButton1.setText("Chiffrement");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(153, 153, 153));
        jButton8.setFont(new java.awt.Font("Liberation Sans", 3, 18)); // NOI18N
        jButton8.setText("Génératiton de Clé");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(153, 153, 153));
        jButton9.setFont(new java.awt.Font("Liberation Sans", 3, 18)); // NOI18N
        jButton9.setText("Hachage");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(153, 153, 153));
        jButton10.setFont(new java.awt.Font("Liberation Sans", 3, 18)); // NOI18N
        jButton10.setText("Signature");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(153, 153, 153));
        jButton11.setFont(new java.awt.Font("Liberation Sans", 3, 18)); // NOI18N
        jButton11.setText("Déchiffrement");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(153, 153, 153));
        jButton12.setFont(new java.awt.Font("Liberation Sans", 3, 18)); // NOI18N
        jButton12.setText("Échange de Clé DH");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jLabel10.setBackground(new java.awt.Color(153, 153, 153));
        jLabel10.setFont(new java.awt.Font("Liberation Sans", 3, 18)); // NOI18N
        jLabel10.setText("Accueil");
        jLabel10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addGap(17, 17, 17))
        );

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));

        jLabel3.setText(" Copyright (c) 2003  Irritable Enterprises, Inc.");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jTextPane1.setEditable(false);
        jTextPane1.setBackground(new java.awt.Color(237, 234, 234));
        jTextPane1.setBorder(null);
        jTextPane1.setFont(new java.awt.Font("Bitstream Charter", 3, 18)); // NOI18N
        jTextPane1.setText("La signature en cryptographie est un mécanisme permettant d'authentifier et d'assurer l'intégrité d'un message en utilisant une clé privée pour générer une signature unique, vérifiable à l'aide de la clé publique correspondante.");
        jScrollPane1.setViewportView(jTextPane1);

        jPanel4.setBackground(new java.awt.Color(237, 234, 234));

        selectedAlgo.setFont(new java.awt.Font("Liberation Sans", 0, 17)); // NOI18N
        selectedAlgo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Algorithme" }));
        selectedAlgo.setToolTipText("");
        selectedAlgo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedAlgoActionPerformed(evt);
            }
        });

        signOrVerif.setFont(new java.awt.Font("Liberation Sans", 0, 17)); // NOI18N
        signOrVerif.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Signer ou Vérifier", "Signature", "Vérification" }));
        signOrVerif.setToolTipText("");
        signOrVerif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOrVerifActionPerformed(evt);
            }
        });

        key.setFont(new java.awt.Font("Liberation Sans", 2, 17)); // NOI18N
        key.setText("Clé privée");
        key.setEnabled(false);
        key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyActionPerformed(evt);
            }
        });

        file.setFont(new java.awt.Font("Liberation Sans", 2, 17)); // NOI18N
        file.setText("Fichier à signer");
        file.setEnabled(false);
        file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileActionPerformed(evt);
            }
        });

        keyName.setFont(new java.awt.Font("Liberation Sans", 3, 15)); // NOI18N

        fileName.setFont(new java.awt.Font("Liberation Sans", 3, 15)); // NOI18N

        headerTitle.setFont(new java.awt.Font("Liberation Sans", 3, 36)); // NOI18N
        headerTitle.setText("Sgnature Numérique");

        sign.setFont(new java.awt.Font("Liberation Sans", 3, 17)); // NOI18N
        sign.setText("Signer et Enregistrer");
        sign.setEnabled(false);
        sign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signActionPerformed(evt);
            }
        });

        headerIndicator.setFont(new java.awt.Font("Liberation Sans", 0, 17)); // NOI18N
        headerIndicator.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerIndicator.setText("Choisir de signer ou de vérifier une signature");

        sgnedFile.setFont(new java.awt.Font("Liberation Sans", 2, 17)); // NOI18N
        sgnedFile.setText("signature");
        sgnedFile.setEnabled(false);
        sgnedFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sgnedFileActionPerformed(evt);
            }
        });

        signedFileName.setFont(new java.awt.Font("Liberation Sans", 3, 15)); // NOI18N
        signedFileName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        verif.setFont(new java.awt.Font("Liberation Sans", 3, 17)); // NOI18N
        verif.setText("Vérification");
        verif.setEnabled(false);
        verif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(264, 264, 264)
                        .addComponent(headerTitle))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(headerIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                            .addGap(238, 238, 238)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 204, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sgnedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(signOrVerif, 0, 185, Short.MAX_VALUE)
                            .addComponent(selectedAlgo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(31, 31, 31)
                        .addComponent(signedFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, Short.MAX_VALUE)
                        .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(file, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(pathStoreSign, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(sign)
                        .addGap(107, 107, 107)
                        .addComponent(verif, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(headerTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(headerIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(signOrVerif, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(file, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sgnedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(signedFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keyName, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(selectedAlgo, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(12, 12, 12)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sign, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(verif, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(pathStoreSign, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(1151, 700));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
        Chiffrement chiffrement = new Chiffrement();
        chiffrement.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        dispose();
        GenKey genKey = new GenKey();
        genKey.setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        dispose();
        Hachage hachage = new Hachage();
        hachage.setVisible(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        dispose();
        Dechiffrement dechiffrement = new Dechiffrement();
        dechiffrement.setVisible(true);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void selectedAlgoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedAlgoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectedAlgoActionPerformed

    private void signOrVerifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOrVerifActionPerformed
        // TODO add your handling code here:
        
        String selectItem = (String) signOrVerif.getSelectedItem();
        if (selectItem.equals("Signature")) {
            sgnedFile.setEnabled(false);
            key.setText("Clé privée");
            key.setEnabled(true);
            file.setText("Fichier à signer");
            file.setEnabled(true);
            sign.setEnabled(true);
            verif.setEnabled(false);
            headerIndicator.setText("Pour signer, importer le fichier à signer et la clé privée de l'algo choisi");
            keyName.setText("");
            fileName.setText("");
            signedFileName.setText("");
            pathStoreSign.setText("");
            selectedAlgo.setModel(new javax.swing.DefaultComboBoxModel <> (new String []{"Algorithme","RSA","DSA","ECDSA"}));

        }else if(selectItem.equals("Vérification")){
            sgnedFile.setEnabled(true);
            key.setText("Clé publique");
            key.setEnabled(true);
            file.setText("Fichier signé");
            file.setEnabled(true);
            sign.setEnabled(false);
            verif.setEnabled(true);
            headerIndicator.setText("Pour vérifier, importer le fichier signé, la signature et la clé publique de l'algo choisi");
            keyName.setText("");
            fileName.setText("");
            signedFileName.setText("");
            pathStoreSign.setText("");
            selectedAlgo.setModel(new javax.swing.DefaultComboBoxModel <> (new String []{"Algorithme","RSA","DSA","ECDSA"}));
        } else {
            sgnedFile.setEnabled(false);
            key.setText("Clé privée");
            key.setEnabled(false);
            file.setText("Fichier à signer");
            file.setEnabled(false);
            sign.setEnabled(false);
            verif.setEnabled(false);
            headerIndicator.setText("Choisir de signer ou de vérifier une signature");
            keyName.setText("");
            fileName.setText("");
            signedFileName.setText("");
            pathStoreSign.setText("");
            selectedAlgo.setModel(new javax.swing.DefaultComboBoxModel <> (new String []{"Algorithme"}));
        }
    }//GEN-LAST:event_signOrVerifActionPerformed

    private void fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("importer le fichier");

        int returnValue = fileChooser.showOpenDialog(this);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            fileToSign = fileChooser.getSelectedFile();
            // Vous pouvez maintenant utiliser le "selectedFile" pour traiter le fichier
            fileName.setText(fileToSign.getName());
        }
    }//GEN-LAST:event_fileActionPerformed

    private void keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("importer la clé");

        int returnValue = fileChooser.showOpenDialog(this);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            cle = fileChooser.getSelectedFile();
            // Vous pouvez maintenant utiliser le "selectedFile" pour traiter le fichier
            keyName.setText(cle.getName());
        }
    }//GEN-LAST:event_keyActionPerformed

    private void signActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signActionPerformed
        // TODO add your handling code here:
        String selectItem = (String) signOrVerif.getSelectedItem();
        
        JFileChooser fileChooser = new JFileChooser();
       fileChooser.setDialogTitle("Enregistrer le fichier signé");

    int returnValue = fileChooser.showSaveDialog(this);
    
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        try {
            File fileToSave = fileChooser.getSelectedFile();
            
            if (cle.getName().endsWith("key")) {
                
                switch ((String) selectedAlgo.getSelectedItem()) {
                    case "RSA": 
                        SignatureInput.getAndSaveSignature(fileToSign.getAbsolutePath(),
                                                                cle.getAbsolutePath(), 
                                                                fileToSave.getAbsolutePath(), "SHA512withRSA");
                        pathStoreSign.setText("Fichier signé et enregistré vers: "+ fileToSave.getAbsolutePath());
                        
                         JOptionPane.showMessageDialog(null,
                "fichier signé et enregistrée avec succés",
                "Information",
                JOptionPane.INFORMATION_MESSAGE);
                        break;
                    case "DSA":
                        SignatureInput.getAndSaveSignature(fileToSign.getAbsolutePath(),
                                                                cle.getAbsolutePath(), 
                                                                fileToSave.getAbsolutePath(), "SHA512withDSA");
                        pathStoreSign.setText("Fichier signé et enregistré vers: "+ fileToSave.getAbsolutePath());
                       
                         JOptionPane.showMessageDialog(null,
                "fichier signé et enregistrée avec succés",
                "Information",
                JOptionPane.INFORMATION_MESSAGE);
                        break;
                    case "ECDSA":
                        SignatureInput.getAndSaveSignature(fileToSign.getAbsolutePath(),
                                                                cle.getAbsolutePath(), 
                                                                fileToSave.getAbsolutePath(), "ECDSA");
                        pathStoreSign.setText("Fichier signé et enregistré vers: "+ fileToSave.getAbsolutePath());
                        
                         JOptionPane.showMessageDialog(null,
                "fichier signé et enregistrée avec succés",
                "Information",
                JOptionPane.INFORMATION_MESSAGE);
                    break;
                default:
                    
                         JOptionPane.showMessageDialog(null,
                "Une erreur s'est produite\n"
                        + "Veuiller choisir l'algorithme puis réessayer",
                "Avertissement",
                JOptionPane.ERROR_MESSAGE);
                         break;
            }
                
            } else {
            
            JFrame frame = new JFrame("Exemple de boîte de dialogue");
                         JOptionPane.showMessageDialog(frame,
                "Veuiller revoir votre clé privée puis réessayer\n"
                        + "Assurez-vous que l'extension de la clé est .key",
                "Avertissement",
                JOptionPane.ERROR_MESSAGE);
            }
            
        }catch(Exception ex){
            JFrame frame = new JFrame("Exemple de boîte de dialogue");
                         JOptionPane.showMessageDialog(frame,
                "Une erreur s'est produite\n"
                        + "Veuillez choisir de bons paramètres puis réessayer",
                "Avertissement",
                JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_signActionPerformed

    private void sgnedFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sgnedFileActionPerformed
        // TODO add your handling code here:
         JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("importer la clé de chiffrement");

    int returnValue = fileChooser.showOpenDialog(this);

    if (returnValue == JFileChooser.APPROVE_OPTION) {
        signature = fileChooser.getSelectedFile();
        // Vous pouvez maintenant utiliser le "selectedFile" pour traiter le fichier
        signedFileName.setText(signature.getName());
    }
    }//GEN-LAST:event_sgnedFileActionPerformed

    private void verifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifActionPerformed
        try {
            // TODO add your handling code here:
            if (cle.getName().endsWith("pub")) {
                
                boolean b = false;
            switch ((String) selectedAlgo.getSelectedItem()) {
                case "RSA":
                    b = SignatureInput.getAndCheckSignature(fileToSign.getAbsolutePath(),
                            signature.getAbsolutePath(),
                            cle.getAbsolutePath(), "SHA512withRSA");
                    break;
                case "DSA":
                    b = SignatureInput.getAndCheckSignature(fileToSign.getAbsolutePath(),
                            signature.getAbsolutePath(),
                            cle.getAbsolutePath(), "SHA512withDSA");
                    break;
                case "ECDSA":
                    b = SignatureInput.getAndCheckSignature(fileToSign.getAbsolutePath(),
                            signature.getAbsolutePath(),
                            cle.getAbsolutePath(), "ECDSA");
                    break;
                default:
                    JFrame frame = new JFrame("Exemple de boîte de dialogue");
                         JOptionPane.showMessageDialog(frame,
                "Une erreur s'est produite.\n Veuiller choisir l'algorithme puis réessayer",
                "Avertissement",
                JOptionPane.ERROR_MESSAGE);
                         break;
                    
            }
            if (b == true) {
                        JFrame frame = new JFrame("Exemple de boîte de dialogue");
                         JOptionPane.showMessageDialog(frame,
                "Correspondance trouvée",
                "Information",
                JOptionPane.INFORMATION_MESSAGE);
                    } else {
                JFrame frame = new JFrame("Exemple de boîte de dialogue");
                         JOptionPane.showMessageDialog(frame,
                "Correspondance non trouvée",
                "Avertissement",
                JOptionPane.WARNING_MESSAGE);
                    }
                
            } else {
                JFrame frame = new JFrame("Exemple de boîte de dialogue");
                         JOptionPane.showMessageDialog(frame,
                "Veuiller revoir votre clé publique puis réessayer.\n Assurez-vous que l'extension de la clé est .pub",
                "Avertissement",
                JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (Exception ex) {
            JFrame frame = new JFrame("Exemple de boîte de dialogue");
                         JOptionPane.showMessageDialog(frame,
                "Une erreur s'est produite\n"
                        + "Veuillez choisir de bons paramètres puis réessayer",
                "Avertissement",
                JOptionPane.ERROR_MESSAGE);
                         
                ex.printStackTrace();
        }
    }//GEN-LAST:event_verifActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        dispose();
        DiffieHellman dh = new DiffieHellman();
        dh.setVisible(true);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        // TODO add your handling code here:
        dispose();
        new Accueil().setVisible(true);
    }//GEN-LAST:event_jLabel10MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Signature.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Signature.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Signature.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Signature.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Signature().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton file;
    private javax.swing.JLabel fileName;
    private javax.swing.JLabel headerIndicator;
    private javax.swing.JLabel headerTitle;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JButton key;
    private javax.swing.JLabel keyName;
    private javax.swing.JLabel pathStoreSign;
    private javax.swing.JComboBox<String> selectedAlgo;
    private javax.swing.JButton sgnedFile;
    private javax.swing.JButton sign;
    private javax.swing.JComboBox<String> signOrVerif;
    private javax.swing.JLabel signedFileName;
    private javax.swing.JLabel user;
    private javax.swing.JButton verif;
    // End of variables declaration//GEN-END:variables
}
